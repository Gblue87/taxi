{% extends '::base.html.twig' %}

{% block main %}
    <section class="index-top">
        {% if sliderBlock is defined and sliderBlock is not null and sliderBlock|length %}
            <div class="center article">
                {{sliderBlock.description|raw}}
            </div>
        {% endif %}
        <div class="taxiChester">
            <div class="car incoming">
                <img src="/images/taxichester.png" alt="taxichester" />
                <div class="wheel cf"></div>
                <div class="wheel cb"></div>
                <div class="lights cf"></div>
                <div class="lights cb"></div>
            </div>
        </div>
        <div class="center">
            <form action="{{path('new_order')}}" method="post">
                <div class="frow">
                    <div class="ffield">
                        <label for="from">{{ 'from'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <input id="from" type="text" name="from" value="" placeholder="Enter location">
                    </div>
                    <div class="ffield">
                        <label for="to">{{ 'to'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <input id="to" type="text" name="to" value="" placeholder="Enter location">
                    </div>
                    <div class="ffield datetime">
                        <label for="date">{{ 'date_time'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <span class="picker-wrapper"><input  id="date" type="text" name="date" value="" placeholder="Date"></span>
                        <span class="picker-wrapper relative"><input id="time" type="text" name="time" value="" placeholder="Time"></span>
                    </div>
                    <div class="ffield">
                        <label for="passengers">{{ 'passangers'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <input id="passengers" name="passengers" type="text" value="2">
                    </div>
                </div>
                <div class="frow">
                    <div class="ffield">
                        <label for="rj">{{ 'return_journey'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <input id="rj" type="checkbox" name="dummy" class="disabling">
                        <div class="ffield datetime">
                            <span class="picker-wrapper"><input id="date2" type="text" name="date2" value="" placeholder="Date" disabled=""></span>
                            <span class="picker-wrapper relative"><input id="time2" type="text" name="time2" value="" placeholder="Time" disabled=""></span>
                        </div>
                    </div>
                    <div class="ffield">
                        <label for="vias">{{ 'add_via'|trans({}, "NewVisionFrontendBundle")}}</label>
                        <input id="vias" type="checkbox" class="disabling" >
                        <div class="ffield datetime">
                            <input id="vias_location" type="text" name="vias_location" value="" placeholder="Enter location" disabled="">
                        </div>
                    </div>
                </div>
                <div class="frow">
                    <a href="#go"  class="mbtn mbtn-orange mbtn-big">{{ 'book_now'|trans({}, "NewVisionFrontendBundle")}}</a>
<!--                         <input id="" type="submit" name="submit" value="Book now" class="mbtn mbtn-orange mbtn-big"> -->
                </div>
                <input type="hidden" name="homepage">
            </form>
        </div>
    </section>
    {% if airports is defined and airports is not null and airports|length %}
        <section class="wbgr">
            <div class="center">
                <h1 class="title">{{ 'airport_transfers'|trans({}, "NewVisionFrontendBundle")}}</h1>
                <div class="slider-wrapper">
                    <div id="airport_slider" class="slider">
                        {% for item in airports %}
                            <div class="slide">
                                <div class="img-wrap">
                                    {% if item.translations[app.request.locale].image is defined and item.translations[app.request.locale].image is not null and item.translations[app.request.locale].image|length %}
                                        {% thumbnail item.translations[app.request.locale].image, 'index' with { 'alt': item.translations[app.request.locale].image.title } %}
                                    {% else %}
                                        <img src="/images/no-img.jpg" alt="No image">
                                    {% endif %}
                                    <div class="hover">
                                        <a href="{{ path("airport_view", {'slug': item.slug }) }}?point=from"><span class="orient">{{ 'from'|trans({}, "NewVisionFrontendBundle")}} <i></i></span></a>
                                        <a href="{{ path("airport_view", {'slug': item.slug }) }}?point=to"><span class="orient"><i></i>{{ 'to'|trans({}, "NewVisionFrontendBundle")}}</span></a></div></div>
                                <span class="title">{{item.title}}</span>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </section>
    {% endif %}
    {% if hotels is defined and hotels is not null and hotels|length %}
        <section class="gbgr">
            <div class="center">
                <h1 class="title">{{ 'hotel_transfers'|trans({}, "NewVisionFrontendBundle")}}</h1>
                <div class="slider-wrapper">
                    <div class="slider">
                        {% for item in hotels %}
                            <div class="slide">
                                <div class="img-wrap">
                                    {% if item.translations[app.request.locale].image is defined and item.translations[app.request.locale].image is not null and item.translations[app.request.locale].image|length %}
                                        {% thumbnail item.translations[app.request.locale].image, 'index' with { 'alt': item.translations[app.request.locale].image.title } %}
                                    {% else %}
                                        <img src="/images/no-img.jpg" alt="No image">
                                    {% endif %}
                                    <div class="hover">
                                        <a href="{{ path("hotel_view", {'slug': item.slug}) }}?point=from"><span class="orient">{{ 'from'|trans({}, "NewVisionFrontendBundle")}} <i></i></span></a>
                                        <a href="{{ path("hotel_view", {'slug': item.slug}) }}?point=to"><span class="orient"><i></i>{{ 'to'|trans({}, "NewVisionFrontendBundle")}}</span></a></div></div>
                                <span class="title">{{item.title}}</span>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </section>
    {% endif %}
    {% if aboutUsBlock is defined and aboutUsBlock is not null and aboutUsBlock|length %}
        <section class="wbgr">
            <div class="car2">
                <div class="center">
                    <h1 class="title">{{aboutUs.title}}</h1>
                    <div class="w50">
                        <article >
                            {{aboutUsBlock.description|raw}}
                        </article>
                        <a href="{{ path("content", {'slug': aboutUs.slug}) }}" class="readmore mbtn mbtn-orange">{{ 'read_more'|trans({}, "NewVisionFrontendBundle")}}</a>
                    </div>
                </div>
            </div>
        </section>
    {% endif %}
{% endblock %}


{% block footerJS %}
    {{ parent() }}

    <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyCtm2xZxd09GKAPHypwLhKwjFiVKxDZIW4"></script>
    <script>
        $(function(){
            var orderTime = {{ orderTime }};
            if ($('#date').length){
                (function(){
                    var minTime = [0, 0],
                        maxTime = [23, 55],
                        minReturnTime = 15, // minutes

                        seconds = function(secs) {
                            return secs * 1000;
                        },

                        minutes = function(mins) {
                            return mins * seconds(60);
                        },

                        hours = function(hours) {
                            return hours * minutes(60);
                        },

                        today = function() {
                            var date = new Date();
                            date.setHours(0);
                            date.setMinutes(0);
                            date.setSeconds(0);
                            date.setMilliseconds(0);
                            return date;
                        },

                        yesterday = function() {
                            return new Date(today().getTime() - hours(24));
                        },

                        tomorrow = function() {
                            return new Date(today().getTime() + hours(24));
                        },
                        enabledFrom = function(offsetMins) {
                            if (!offsetMins) offsetMins = 0;
                            return new Date(new Date().getTime() + hours(parseInt(orderTime)) + minutes(offsetMins));
                        },

                        lastDisabledDay = function(offsetMins) {
                            var date = enabledFrom(offsetMins) - hours(24);
                            date = new Date(date);
                            date.setHours(0);
                            date.setMinutes(0);
                            date.setSeconds(0);
                            date.setMilliseconds(0);
                            return date;
                        },

                        firstAvailableDay = function(offsetMins) {
                            return new Date(lastDisabledDay(offsetMins).getTime() + hours(24));
                        },

                        disableDatesTo = function(picker, to) {
                            picker.component.item.disable = [];
                            picker.set('disable', [{
                                from: [0, 0, 0],
                                to: to
                            }]);
                        },

                        dateOptions = {
                            format: 'dd/mm/yyyy',
                            formatSubmit: 'yyyy-mm-dd',
                            monthsFull: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                            monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                            weekdaysFull: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                            weekdaysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                            today: 'Today',
                            clear: 'Clear',
                            close: 'Close'
                        },

                        timeOptions = {
                            format: 'hh:i A',
                            formatSubmit: 'HH:i',
                            interval: 5,
                            min: minTime,
                            max: maxTime,
                            clear: 'Clear',
                        },
                        date1 = $('#date').pickadate(dateOptions).pickadate('picker'),
                        time1 = $('#time').pickatime(timeOptions).pickatime('picker');

                    date1.on({

                        open: function() {
                            disableDatesTo(date1, lastDisabledDay());
                        },

                        set: function(set) {
                            if (typeof set.select != "number")
                                return;

                            var fday = firstAvailableDay().getTime();

                            if (set.select < fday) {
                                date1.trigger('open');
                                date1.set('select', fday);
                            }
                        }
                    });

                    time1.on({

                        open: function() {

                            try {
                                date1.set('select', date1.get('select').pick);
                            } catch (e) {
                                console.log('wrong date');
                                return;
                            }

                            var date = date1.get('select').pick,
                                from = enabledFrom(),
                                fday = firstAvailableDay().getTime();

                            if (date == fday) {
                                var hours = from.getHours(),
                                    mins = from.getMinutes();

                                mins = Math.round(mins / 5) * 5;

                                time1.set('min', [hours, mins]);
                                time1.set('select', [hours, mins]);

                            } else
                                time1.set('min', minTime);
                        }

                    });

                    if ($('#date2').length) {

                        var time2 = $('#time2').pickatime(timeOptions).pickatime('picker'),

                            date2 = $('#date2').pickadate(dateOptions).pickadate('picker').on({

                                open: function() {
                                    var ts = date1.get('select');
                                    if ((ts === null) || (typeof ts.pick == "undefined")) {
                                        disableDatesTo(date2, lastDisabledDay(minReturnTime));
                                        return;
                                    }

                                    ts = ts.pick;

                                    var tts = time1.get('select');
                                    if ((tts === null) || (typeof tts.pick == "undefined")) {
                                        disableDatesTo(date2, new Date(ts - hours(24)));
                                        return;
                                    }

                                    tts = ts + minutes(tts.pick + minReturnTime);
                                    var tts2 = ts + hours(maxTime[0]) + minutes(maxTime[1]);

                                    if (tts > tts2) {
                                        disableDatesTo(date2, new Date(ts));
                                        return;
                                    }

                                    disableDatesTo(date2, new Date(ts - hours(24)));
                                },

                                set: function(set) {
                                    if (typeof set.select != "number")
                                        return;

                                    var ts = date1.get('select');
                                    if ((ts === null) || (typeof ts.pick == "undefined")) {
                                        time2.set('min', minTime);
                                        return;
                                    }

                                    ts = ts.pick;

                                    if (set.select == ts){
                                        var tts = time1.get('select');
                                        if ((tts === null) ||
                                            (typeof tts.pick == "undefined")
                                        ) {
                                            time2.set('min', minTime);
                                            return;
                                        }
                                        tts = ts + minutes(tts.pick + minReturnTime);
                                        time2.set('min', new Date(tts));

                                    } else
                                        time2.set('min', minTime);
                                }
                            });
                    }

                    var $ps = $('#passengers');

                    if ($ps.length) {
                        $ps.pickatime({
                            format: 'h',
                            min: [1, 0],
                            max: [8, 0],
                            interval: 60,
                            klass: {
                                buttonClear: 'hidden'
                            }
                        }).pickatime('picker').set('select', [$ps.val(), 0]);
                    }
                })();
            }
            var gebid = function(id) { return document.getElementById(id) };
            var opts = { componentRestrictions: { country: "uk"}};
            var fromValue = $('input[id$="from"]');
            var toValue = $('input[id$="to"]');
            google.maps.event.addDomListener(window, 'load', function () {
                userPoint = new google.maps.places.Autocomplete(fromValue[0], opts);
                userPoint2 = new google.maps.places.Autocomplete(toValue[0], opts);
                vias =  new google.maps.places.Autocomplete(gebid('vias_location'), opts);
                directionsDisplay = new google.maps.DirectionsRenderer({ draggable: false});
            });
        })
    </script>
{% endblock %}