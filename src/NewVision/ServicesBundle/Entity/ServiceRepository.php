<?php
/**
 * This file is part of the NewVisionServicesBundle.
 *
 * (c) Nikolay Tumbalev <n.tumbalev@newvision.bg>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace NewVision\ServicesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use NewVision\PublishWorkflowBundle\PublishWorkflowQueryBuilderTrait;
/**
 * Custom methods for working with Entity
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @package NewVisionServicesRepository
 * @author  Nikolay Tumbalev <n.tumbalev@newvision.bg>
 */
class ServiceRepository extends EntityRepository
{
    use PublishWorkflowQueryBuilderTrait;

    /**
     * Find all by locale
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findAllByLocale($locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->setMaxResults($limit)
            ->setFirstResult($offset);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Find all by locale
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findHomepageHotels($locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale and c.isHomepage = :homepage')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('locale', $locale)
            ->setParameter('homepage', 1)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setMaxResults($limit)
            ->setFirstResult($offset);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Find one news by slug and locale
     * @var string $slug
     * @var string $locale
     * @return array
     */
    public function findOneBySlugAndLocale($slug, $locale)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder(null);
        $qb
            ->leftJoin('c.translations', 't')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug = :slug')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('slug', $slug)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime());
        $query = $qb->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Find all by serviceCategory and locale
     * @var serviceCategoryId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findAllByCategoryAndLocale($serviceCategoryId, $locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.serviceCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('cat.id = :serviceCategoryId')
            ->andWhere('t.title IS NOT NULL')
            ->setParameter('serviceCategoryId', $serviceCategoryId)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Query for services listing
     * @var serviceCategoryId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function getServicesListingQuery($serviceCategoryId, $locale, $page, $pageSize)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder(null);
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.serviceCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('t.title IS NOT NULL');
            if ($serviceCategoryId === null) {
                $qb->andWhere('cat.id IS NULL');
            } else {
                $qb
                    ->andWhere('cat.id = :serviceCategoryId')
                    ->setParameter('serviceCategoryId', $serviceCategoryId)
                ;
            }
        $qb
            ->setParameter('locale', $locale)
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($pageSize * ($page-1))
            ->setMaxResults($pageSize);

        return $qb->getQuery();
    }

    /**
     * Find all by category and locale
     * @var categoryId integer
     * @var serviceId integer
     * @var locale string
     * @var limit integer
     * @var offset integer
     * @return array
     */
    public function findSameCategoryServices($serviceCategoryId, $serviceId, $locale, $limit = null, $offset = null)
    {
        $qb = $this->getPublishWorkFlowQueryBuilder();
        $qb
            ->leftJoin('c.translations', 't')
            ->leftJoin('c.serviceCategories', 'cat')
            ->andWhere('t.locale = :locale')
            ->andWhere('t.slug IS NOT NULL')
            ->andWhere('t.title IS NOT NULL')
            ->andWhere('cat.id = :serviceCategoryId')
            ->andWhere('c.id != :serviceId')
            ->setParameter('serviceCategoryId', $serviceCategoryId)
            ->setParameter('serviceId', $serviceId)
            ->setParameter('locale', $locale)
            ->setParameter('now', new \DateTime())
            ->orderBy('c.rank', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }
}
